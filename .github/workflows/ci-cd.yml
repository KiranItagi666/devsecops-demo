name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml'  # Ignore to prevent unnecessary loops
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Enables manual trigger

jobs:
  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test || echo "No tests found, skipping..."

  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ghcr.io
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}  # ✅ Ensuring IMAGE_TAG is available for update-k8s
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Get Image Tag and Lowercase Repository Name
        id: vars
        run: |
          IMAGE_TAG=$(echo '${{ github.sha }}' | cut -c1-7)
          LOWERCASE_IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "LOWERCASE_IMAGE_NAME=$LOWERCASE_IMAGE_NAME" >> $GITHUB_ENV
          echo "::set-output name=image_tag::$IMAGE_TAG"

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}
          tags: |
            sha-${{ env.IMAGE_TAG }}
            latest

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}:sha-${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}:sha-${{ env.IMAGE_TAG }}"
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  update-k8s:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]  # ✅ Ensures `docker` runs first
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
      
      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: ${{ needs.docker.outputs.image_tag }}  # ✅ Pass image_tag correctly
          LOWERCASE_IMAGE_NAME: ${{ env.LOWERCASE_IMAGE_NAME }}
          REGISTRY: ghcr.io
        run: |
          # Ensure IMAGE_TAG is not empty before executing sed
          if [ -z "$IMAGE_TAG" ]; then
            echo "Error: IMAGE_TAG is empty. Exiting..."
            exit 1
          fi

          # Define the correct image with SHA tag
          NEW_IMAGE="${REGISTRY}/${LOWERCASE_IMAGE_NAME}:sha-${IMAGE_TAG}"

          # Replace only the image value, keeping structure intact
          sed -i "s|image: ghcr.io/.*|image: ${NEW_IMAGE}|g" kubernetes/deployment.yaml

          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" kubernetes/deployment.yaml
      
      - name: Commit and push changes
        run: |
          git add kubernetes/deployment.yaml
          git commit -m "Update Kubernetes deployment with new image tag: sha-${{ needs.docker.outputs.image_tag }} [skip ci]" || echo "No changes to commit"
          git push
